"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os


from dotenv import load_dotenv
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG')

ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = ['https://realestate.katoengineer.com', 'https://localhost']

# Application definition

INSTALLED_APPS = [
    'listings.apps.ListingConfig',
    'realtors.apps.RealtorsConfig',
    'pages.apps.PagesConfig',
    'accounts.apps.AccountsConfig',
    'contacts.apps.ContactsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # allow to use humanize

    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

# Django will find templates in base directory, folder templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR), 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# dotenv_path = os.path.join(os.path.dirname(__file__), './../postgresql/.env')
# if not os.path.isfile('/.dockerenv'):
#     load_dotenv(dotenv_path)

DB_NAME = config("AWS_DB")
DB_USER = config("AWS_USER")
DB_PASSWORD = config("AWS_PASSWORD")
DB_HOST = config("AWS_ENDPOINT")
DB_PORT = config("AWS_PORT")

# MONGO_URI = os.environ.get("MONGO_URI")
#
# DATABASES = {
#     'default': {
#         'ENGINE': 'djongo',
#         'NAME': 'real_estate',
#         'ENFORCE_SCHEMA': False,
#         'CLIENT': {
#             'host': MONGO_URI
#         }
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'project/static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media Folder setting
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Message alerts
MESSAGE_TAGS = {
    messages.ERROR: "danger"
}

# Variable for email sending
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'quan.ngo@advesa.com'
EMAIL_HOST_PASSWORD = 'rnbcjpseflmmjikt'

# USE_S3 = True
# # AWS credentials
# if USE_S3:
#     AWS_ACCESS_KEY_ID = 'AKIATCQNDK5VCF4J4N5I'
#     AWS_SECRET_ACCESS_KEY = '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'
#
#     # S3 configuration setting
#     AWS_STORAGE_BUCKET_NAME = 'djangorealestate'
#
#     DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#     STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#
#     AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
#
#     AWS_S3_FILE_OVERWRITE = False  # Keep both file with same name
#
#     # Media settings
#     MEDIA_URL = (
#         'https://%s/' % AWS_S3_CUSTOM_DOMAIN if 'AWS_S3_CUSTOM_DOMAIN' in locals() else
#         f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/'
#     )
#
#     # Set the media root to the location where you want to store media files
#     # For example, if you want to store them in a "media" folder within your S3 bucket
#     MEDIA_ROOT = 'media/'  # Change this path as needed
#
#     # Optionally, you can define additional CORS settings for media files
#     # For example, allowing all origins to access media files
#     AWS_S3_OBJECT_PARAMETERS = {
#         'ACL': 'public-read',
#         'CacheControl': 'max-age=86400',
#     }
